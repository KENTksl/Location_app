// Mocks generated by Mockito 5.4.6 from annotations
// in locationrealtime/test/services/service_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:geolocator/geolocator.dart' as _i3;
import 'package:locationrealtime/models/chat_message.dart' as _i12;
import 'package:locationrealtime/models/friend.dart' as _i9;
import 'package:locationrealtime/models/friend_request.dart' as _i10;
import 'package:locationrealtime/models/location_history.dart' as _i2;
import 'package:locationrealtime/models/user.dart' as _i6;
import 'package:locationrealtime/services/auth_service.dart' as _i4;
import 'package:locationrealtime/services/chat_service.dart' as _i11;
import 'package:locationrealtime/services/friend_service.dart' as _i8;
import 'package:locationrealtime/services/geolocator_wrapper.dart' as _i15;
import 'package:locationrealtime/services/location_history_service.dart'
    as _i13;
import 'package:locationrealtime/services/user_service.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationRoute_0 extends _i1.SmartFake implements _i2.LocationRoute {
  _FakeLocationRoute_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLocationHistoryStats_1 extends _i1.SmartFake
    implements _i2.LocationHistoryStats {
  _FakeLocationHistoryStats_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePosition_2 extends _i1.SmartFake implements _i3.Position {
  _FakePosition_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i4.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i6.User?> get currentUserStream =>
      (super.noSuchMethod(
            Invocation.getter(#currentUserStream),
            returnValue: _i5.Stream<_i6.User?>.empty(),
          )
          as _i5.Stream<_i6.User?>);

  @override
  bool get isSignedIn =>
      (super.noSuchMethod(Invocation.getter(#isSignedIn), returnValue: false)
          as bool);

  @override
  _i5.Future<_i6.User?> signUp(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signUp, [email, password]),
            returnValue: _i5.Future<_i6.User?>.value(),
          )
          as _i5.Future<_i6.User?>);

  @override
  _i5.Future<_i6.User?> signIn(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [email, password]),
            returnValue: _i5.Future<_i6.User?>.value(),
          )
          as _i5.Future<_i6.User?>);

  @override
  _i5.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> forgotPassword(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#forgotPassword, [email]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i7.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i6.User?> getUserById(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [userId]),
            returnValue: _i5.Future<_i6.User?>.value(),
          )
          as _i5.Future<_i6.User?>);

  @override
  _i5.Future<void> updateUser(_i6.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#updateUser, [user]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> saveUser(_i6.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateAvatar(String? userId, String? avatarUrl) =>
      (super.noSuchMethod(
            Invocation.method(#updateAvatar, [userId, avatarUrl]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateLocationSharing(String? userId, bool? isSharing) =>
      (super.noSuchMethod(
            Invocation.method(#updateLocationSharing, [userId, isSharing]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateAlwaysShareLocation(
    String? userId,
    bool? alwaysShare,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateAlwaysShareLocation, [
              userId,
              alwaysShare,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateCurrentLocation(
    String? userId,
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateCurrentLocation, [
              userId,
              latitude,
              longitude,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> checkLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkLocationPermission, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> requestLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestLocationPermission, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<Map<String, double>?> getCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLocation, []),
            returnValue: _i5.Future<Map<String, double>?>.value(),
          )
          as _i5.Future<Map<String, double>?>);

  @override
  _i5.Stream<String?> listenToAvatarChanges(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#listenToAvatarChanges, [userId]),
            returnValue: _i5.Stream<String?>.empty(),
          )
          as _i5.Stream<String?>);

  @override
  _i5.Stream<bool> listenToLocationSharingChanges(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#listenToLocationSharingChanges, [userId]),
            returnValue: _i5.Stream<bool>.empty(),
          )
          as _i5.Stream<bool>);
}

/// A class which mocks [FriendService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFriendService extends _i1.Mock implements _i8.FriendService {
  MockFriendService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i9.Friend>> getFriends() =>
      (super.noSuchMethod(
            Invocation.method(#getFriends, []),
            returnValue: _i5.Future<List<_i9.Friend>>.value(<_i9.Friend>[]),
          )
          as _i5.Future<List<_i9.Friend>>);

  @override
  _i5.Future<void> addFriend(String? friendId) =>
      (super.noSuchMethod(
            Invocation.method(#addFriend, [friendId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> removeFriend(String? friendId) =>
      (super.noSuchMethod(
            Invocation.method(#removeFriend, [friendId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> sendFriendRequest(String? toUserId) =>
      (super.noSuchMethod(
            Invocation.method(#sendFriendRequest, [toUserId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i10.FriendRequest>> getFriendRequests() =>
      (super.noSuchMethod(
            Invocation.method(#getFriendRequests, []),
            returnValue: _i5.Future<List<_i10.FriendRequest>>.value(
              <_i10.FriendRequest>[],
            ),
          )
          as _i5.Future<List<_i10.FriendRequest>>);

  @override
  _i5.Future<void> acceptFriendRequest(String? fromUserId) =>
      (super.noSuchMethod(
            Invocation.method(#acceptFriendRequest, [fromUserId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> rejectFriendRequest(String? fromUserId) =>
      (super.noSuchMethod(
            Invocation.method(#rejectFriendRequest, [fromUserId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  double calculateDistance(
    double? lat1,
    double? lng1,
    double? lat2,
    double? lng2,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#calculateDistance, [lat1, lng1, lat2, lng2]),
            returnValue: 0.0,
          )
          as double);

  @override
  _i5.Stream<Map<String, dynamic>?> listenToFriendLocation(String? friendId) =>
      (super.noSuchMethod(
            Invocation.method(#listenToFriendLocation, [friendId]),
            returnValue: _i5.Stream<Map<String, dynamic>?>.empty(),
          )
          as _i5.Stream<Map<String, dynamic>?>);

  @override
  _i5.Stream<String?> listenToFriendAvatar(String? friendId) =>
      (super.noSuchMethod(
            Invocation.method(#listenToFriendAvatar, [friendId]),
            returnValue: _i5.Stream<String?>.empty(),
          )
          as _i5.Stream<String?>);

  @override
  _i5.Stream<void> listenToFriendsChanges() =>
      (super.noSuchMethod(
            Invocation.method(#listenToFriendsChanges, []),
            returnValue: _i5.Stream<void>.empty(),
          )
          as _i5.Stream<void>);
}

/// A class which mocks [ChatService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatService extends _i1.Mock implements _i11.ChatService {
  MockChatService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<List<_i12.ChatMessage>> listenToMessages(String? friendId) =>
      (super.noSuchMethod(
            Invocation.method(#listenToMessages, [friendId]),
            returnValue: _i5.Stream<List<_i12.ChatMessage>>.empty(),
          )
          as _i5.Stream<List<_i12.ChatMessage>>);

  @override
  _i5.Future<void> sendMessage(String? friendId, String? text) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [friendId, text]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i12.ChatMessage?> getLastMessage(String? friendId) =>
      (super.noSuchMethod(
            Invocation.method(#getLastMessage, [friendId]),
            returnValue: _i5.Future<_i12.ChatMessage?>.value(),
          )
          as _i5.Future<_i12.ChatMessage?>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getChatList() =>
      (super.noSuchMethod(
            Invocation.method(#getChatList, []),
            returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i5.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [LocationHistoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationHistoryService extends _i1.Mock
    implements _i13.LocationHistoryService {
  MockLocationHistoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveRouteLocally(_i2.LocationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#saveRouteLocally, [route]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.LocationRoute>> getRoutesLocally() =>
      (super.noSuchMethod(
            Invocation.method(#getRoutesLocally, []),
            returnValue: _i5.Future<List<_i2.LocationRoute>>.value(
              <_i2.LocationRoute>[],
            ),
          )
          as _i5.Future<List<_i2.LocationRoute>>);

  @override
  _i5.Future<void> saveRouteToFirebase(_i2.LocationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#saveRouteToFirebase, [route]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.LocationRoute>> getRoutesFromFirebase() =>
      (super.noSuchMethod(
            Invocation.method(#getRoutesFromFirebase, []),
            returnValue: _i5.Future<List<_i2.LocationRoute>>.value(
              <_i2.LocationRoute>[],
            ),
          )
          as _i5.Future<List<_i2.LocationRoute>>);

  @override
  double calculateDistance(
    _i2.LocationPoint? point1,
    _i2.LocationPoint? point2,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#calculateDistance, [point1, point2]),
            returnValue: 0.0,
          )
          as double);

  @override
  double calculateTotalDistance(List<_i2.LocationPoint>? points) =>
      (super.noSuchMethod(
            Invocation.method(#calculateTotalDistance, [points]),
            returnValue: 0.0,
          )
          as double);

  @override
  bool isValidRoute(List<_i2.LocationPoint>? points) =>
      (super.noSuchMethod(
            Invocation.method(#isValidRoute, [points]),
            returnValue: false,
          )
          as bool);

  @override
  _i2.LocationRoute createRoute({
    required String? name,
    required List<_i2.LocationPoint>? points,
    String? description,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createRoute, [], {
              #name: name,
              #points: points,
              #description: description,
            }),
            returnValue: _FakeLocationRoute_0(
              this,
              Invocation.method(#createRoute, [], {
                #name: name,
                #points: points,
                #description: description,
              }),
            ),
          )
          as _i2.LocationRoute);

  @override
  _i5.Future<void> saveCurrentRoute(_i2.LocationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#saveCurrentRoute, [route]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.LocationRoute?> getCurrentRoute() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentRoute, []),
            returnValue: _i5.Future<_i2.LocationRoute?>.value(),
          )
          as _i5.Future<_i2.LocationRoute?>);

  @override
  _i5.Future<void> clearCurrentRoute() =>
      (super.noSuchMethod(
            Invocation.method(#clearCurrentRoute, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> checkLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkLocationPermission, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i2.LocationPoint?> getCurrentLocationPoint() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLocationPoint, []),
            returnValue: _i5.Future<_i2.LocationPoint?>.value(),
          )
          as _i5.Future<_i2.LocationPoint?>);

  @override
  bool shouldAddPoint(
    _i2.LocationPoint? newPoint,
    List<_i2.LocationPoint>? existingPoints,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#shouldAddPoint, [newPoint, existingPoints]),
            returnValue: false,
          )
          as bool);

  @override
  _i2.LocationHistoryStats calculateStats(List<_i2.LocationRoute>? routes) =>
      (super.noSuchMethod(
            Invocation.method(#calculateStats, [routes]),
            returnValue: _FakeLocationHistoryStats_1(
              this,
              Invocation.method(#calculateStats, [routes]),
            ),
          )
          as _i2.LocationHistoryStats);

  @override
  _i5.Future<void> saveStats(_i2.LocationHistoryStats? stats) =>
      (super.noSuchMethod(
            Invocation.method(#saveStats, [stats]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.LocationHistoryStats?> getStats() =>
      (super.noSuchMethod(
            Invocation.method(#getStats, []),
            returnValue: _i5.Future<_i2.LocationHistoryStats?>.value(),
          )
          as _i5.Future<_i2.LocationHistoryStats?>);

  @override
  String generateRouteName(_i2.LocationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#generateRouteName, [route]),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.method(#generateRouteName, [route]),
            ),
          )
          as String);

  @override
  List<_i2.LocationRoute> filterRoutesByDate(
    List<_i2.LocationRoute>? routes,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#filterRoutesByDate, [
              routes,
              startDate,
              endDate,
            ]),
            returnValue: <_i2.LocationRoute>[],
          )
          as List<_i2.LocationRoute>);

  @override
  List<_i2.LocationRoute> filterRoutesByDistance(
    List<_i2.LocationRoute>? routes,
    double? minDistance,
    double? maxDistance,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#filterRoutesByDistance, [
              routes,
              minDistance,
              maxDistance,
            ]),
            returnValue: <_i2.LocationRoute>[],
          )
          as List<_i2.LocationRoute>);

  @override
  _i5.Future<void> deleteRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRoute, [routeId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  Map<String, dynamic> exportRouteData(_i2.LocationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#exportRouteData, [route]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i2.LocationRoute? importRouteData(Map<String, dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#importRouteData, [data]))
          as _i2.LocationRoute?);
}

/// A class which mocks [GeolocatorWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorWrapper extends _i1.Mock implements _i15.GeolocatorWrapper {
  MockGeolocatorWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Position> getCurrentPosition({
    _i3.LocationSettings? locationSettings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentPosition, [], {
              #locationSettings: locationSettings,
            }),
            returnValue: _i5.Future<_i3.Position>.value(
              _FakePosition_2(
                this,
                Invocation.method(#getCurrentPosition, [], {
                  #locationSettings: locationSettings,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.Position>);

  @override
  _i5.Future<_i3.LocationPermission> checkPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkPermission, []),
            returnValue: _i5.Future<_i3.LocationPermission>.value(
              _i3.LocationPermission.denied,
            ),
          )
          as _i5.Future<_i3.LocationPermission>);

  @override
  _i5.Future<_i3.LocationPermission> requestPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermission, []),
            returnValue: _i5.Future<_i3.LocationPermission>.value(
              _i3.LocationPermission.denied,
            ),
          )
          as _i5.Future<_i3.LocationPermission>);

  @override
  _i5.Future<bool> isLocationServiceEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#isLocationServiceEnabled, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  double distanceBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#distanceBetween, [
              startLatitude,
              startLongitude,
              endLatitude,
              endLongitude,
            ]),
            returnValue: 0.0,
          )
          as double);
}
