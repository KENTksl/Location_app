// Mocks generated by Mockito 5.4.6 from annotations
// in locationrealtime/test/pages/location_history_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:locationrealtime/models/location_history.dart' as _i2;
import 'package:locationrealtime/services/location_history_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationRoute_0 extends _i1.SmartFake implements _i2.LocationRoute {
  _FakeLocationRoute_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLocationHistoryStats_1 extends _i1.SmartFake
    implements _i2.LocationHistoryStats {
  _FakeLocationHistoryStats_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LocationHistoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationHistoryService extends _i1.Mock
    implements _i3.LocationHistoryService {
  MockLocationHistoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveRouteLocally(_i2.LocationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#saveRouteLocally, [route]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.LocationRoute>> getRoutesLocally() =>
      (super.noSuchMethod(
            Invocation.method(#getRoutesLocally, []),
            returnValue: _i4.Future<List<_i2.LocationRoute>>.value(
              <_i2.LocationRoute>[],
            ),
          )
          as _i4.Future<List<_i2.LocationRoute>>);

  @override
  _i4.Future<void> saveRouteToFirebase(_i2.LocationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#saveRouteToFirebase, [route]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.LocationRoute>> getRoutesFromFirebase() =>
      (super.noSuchMethod(
            Invocation.method(#getRoutesFromFirebase, []),
            returnValue: _i4.Future<List<_i2.LocationRoute>>.value(
              <_i2.LocationRoute>[],
            ),
          )
          as _i4.Future<List<_i2.LocationRoute>>);

  @override
  double calculateDistance(
    _i2.LocationPoint? point1,
    _i2.LocationPoint? point2,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#calculateDistance, [point1, point2]),
            returnValue: 0.0,
          )
          as double);

  @override
  double calculateTotalDistance(List<_i2.LocationPoint>? points) =>
      (super.noSuchMethod(
            Invocation.method(#calculateTotalDistance, [points]),
            returnValue: 0.0,
          )
          as double);

  @override
  bool isValidRoute(List<_i2.LocationPoint>? points) =>
      (super.noSuchMethod(
            Invocation.method(#isValidRoute, [points]),
            returnValue: false,
          )
          as bool);

  @override
  _i2.LocationRoute createRoute({
    required String? name,
    required List<_i2.LocationPoint>? points,
    String? description,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createRoute, [], {
              #name: name,
              #points: points,
              #description: description,
            }),
            returnValue: _FakeLocationRoute_0(
              this,
              Invocation.method(#createRoute, [], {
                #name: name,
                #points: points,
                #description: description,
              }),
            ),
          )
          as _i2.LocationRoute);

  @override
  _i4.Future<void> saveCurrentRoute(_i2.LocationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#saveCurrentRoute, [route]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.LocationRoute?> getCurrentRoute() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentRoute, []),
            returnValue: _i4.Future<_i2.LocationRoute?>.value(),
          )
          as _i4.Future<_i2.LocationRoute?>);

  @override
  _i4.Future<void> clearCurrentRoute() =>
      (super.noSuchMethod(
            Invocation.method(#clearCurrentRoute, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> checkLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkLocationPermission, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i2.LocationPoint?> getCurrentLocationPoint() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLocationPoint, []),
            returnValue: _i4.Future<_i2.LocationPoint?>.value(),
          )
          as _i4.Future<_i2.LocationPoint?>);

  @override
  bool shouldAddPoint(
    _i2.LocationPoint? newPoint,
    List<_i2.LocationPoint>? existingPoints,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#shouldAddPoint, [newPoint, existingPoints]),
            returnValue: false,
          )
          as bool);

  @override
  _i2.LocationHistoryStats calculateStats(List<_i2.LocationRoute>? routes) =>
      (super.noSuchMethod(
            Invocation.method(#calculateStats, [routes]),
            returnValue: _FakeLocationHistoryStats_1(
              this,
              Invocation.method(#calculateStats, [routes]),
            ),
          )
          as _i2.LocationHistoryStats);

  @override
  _i4.Future<void> saveStats(_i2.LocationHistoryStats? stats) =>
      (super.noSuchMethod(
            Invocation.method(#saveStats, [stats]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.LocationHistoryStats?> getStats() =>
      (super.noSuchMethod(
            Invocation.method(#getStats, []),
            returnValue: _i4.Future<_i2.LocationHistoryStats?>.value(),
          )
          as _i4.Future<_i2.LocationHistoryStats?>);

  @override
  String generateRouteName(_i2.LocationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#generateRouteName, [route]),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#generateRouteName, [route]),
            ),
          )
          as String);

  @override
  List<_i2.LocationRoute> filterRoutesByDate(
    List<_i2.LocationRoute>? routes,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#filterRoutesByDate, [
              routes,
              startDate,
              endDate,
            ]),
            returnValue: <_i2.LocationRoute>[],
          )
          as List<_i2.LocationRoute>);

  @override
  List<_i2.LocationRoute> filterRoutesByDistance(
    List<_i2.LocationRoute>? routes,
    double? minDistance,
    double? maxDistance,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#filterRoutesByDistance, [
              routes,
              minDistance,
              maxDistance,
            ]),
            returnValue: <_i2.LocationRoute>[],
          )
          as List<_i2.LocationRoute>);

  @override
  _i4.Future<void> deleteRoute(String? routeId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRoute, [routeId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  Map<String, dynamic> exportRouteData(_i2.LocationRoute? route) =>
      (super.noSuchMethod(
            Invocation.method(#exportRouteData, [route]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i2.LocationRoute? importRouteData(Map<String, dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#importRouteData, [data]))
          as _i2.LocationRoute?);
}
